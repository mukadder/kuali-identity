package com.example.testSoap.wcf;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.2.8.3
//
// Created by Quasar Development 
//
//---------------------------------------------------


import java.util.Hashtable;
import org.ksoap2.serialization.*;
import java.util.ArrayList;
import org.ksoap2.serialization.PropertyInfo;

public class VEFCompositePredicateType extends VEFabstractPredicate implements KvmSerializable
{

    
    public ArrayList< VEFAndType> and =new ArrayList<VEFAndType >();
    
    public ArrayList< VEFEqualType> equal =new ArrayList<VEFEqualType >();
    
    public ArrayList< VEFEqualIgnoreCaseType> equalIgnoreCase =new ArrayList<VEFEqualIgnoreCaseType >();
    
    public ArrayList< VEFExistsSubQueryType> existsSubQuery =new ArrayList<VEFExistsSubQueryType >();
    
    public ArrayList< VEFGreaterThanType> greaterThan =new ArrayList<VEFGreaterThanType >();
    
    public ArrayList< VEFGreaterThanOrEqualType> greaterThanOrEqual =new ArrayList<VEFGreaterThanOrEqualType >();
    
    public ArrayList< VEFInType> in =new ArrayList<VEFInType >();
    
    public ArrayList< VEFInIgnoreCaseType> inIgnoreCase =new ArrayList<VEFInIgnoreCaseType >();
    
    public ArrayList< VEFLessThanType> lessThan =new ArrayList<VEFLessThanType >();
    
    public ArrayList< VEFLessThanOrEqualType> lessThanOrEqual =new ArrayList<VEFLessThanOrEqualType >();
    
    public ArrayList< VEFLikeType> like =new ArrayList<VEFLikeType >();
    
    public ArrayList< VEFLikeIgnoreCaseType> likeIgnoreCase =new ArrayList<VEFLikeIgnoreCaseType >();
    
    public ArrayList< VEFNotEqualType> notEqual =new ArrayList<VEFNotEqualType >();
    
    public ArrayList< VEFNotEqualIgnoreCaseType> notEqualIgnoreCase =new ArrayList<VEFNotEqualIgnoreCaseType >();
    
    public ArrayList< VEFNotInType> notIn =new ArrayList<VEFNotInType >();
    
    public ArrayList< VEFNotInIgnoreCaseType> notInIgnoreCase =new ArrayList<VEFNotInIgnoreCaseType >();
    
    public ArrayList< VEFNotLikeIgnoreCaseType> notLikeIgnoreCase =new ArrayList<VEFNotLikeIgnoreCaseType >();
    
    public ArrayList< VEFNotLikeType> notLike =new ArrayList<VEFNotLikeType >();
    
    public ArrayList< VEFNotNullType> notNull =new ArrayList<VEFNotNullType >();
    
    public ArrayList< VEFNullType> null =new ArrayList<VEFNullType >();
    
    public ArrayList< VEFOrType> or =new ArrayList<VEFOrType >();
    

    
    
    @Override
    public void loadFromSoap(java.lang.Object paramObj,VEFExtendedSoapSerializationEnvelope __envelope)
    {
        if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;
        super.loadFromSoap(paramObj, __envelope);

    }

    @Override
    protected boolean loadProperty(PropertyInfo info,SoapObject soapObject,VEFExtendedSoapSerializationEnvelope __envelope)
    {
        java.lang.Object obj = info.getValue();
        if (info.name.equals("and"))
        {
            if(obj!=null)
            {
                if(this.and==null)
                {
                    this.and = new java.util.ArrayList< VEFAndType>();
                }
                java.lang.Object j =obj;
                VEFAndType j1= (VEFAndType)__envelope.get(j,VEFAndType.class,false);
                this.and.add(j1);
            }
            return true;
        }
        if (info.name.equals("equal"))
        {
            if(obj!=null)
            {
                if(this.equal==null)
                {
                    this.equal = new java.util.ArrayList< VEFEqualType>();
                }
                java.lang.Object j =obj;
                VEFEqualType j1= (VEFEqualType)__envelope.get(j,VEFEqualType.class,false);
                this.equal.add(j1);
            }
            return true;
        }
        if (info.name.equals("equalIgnoreCase"))
        {
            if(obj!=null)
            {
                if(this.equalIgnoreCase==null)
                {
                    this.equalIgnoreCase = new java.util.ArrayList< VEFEqualIgnoreCaseType>();
                }
                java.lang.Object j =obj;
                VEFEqualIgnoreCaseType j1= (VEFEqualIgnoreCaseType)__envelope.get(j,VEFEqualIgnoreCaseType.class,false);
                this.equalIgnoreCase.add(j1);
            }
            return true;
        }
        if (info.name.equals("existsSubQuery"))
        {
            if(obj!=null)
            {
                if(this.existsSubQuery==null)
                {
                    this.existsSubQuery = new java.util.ArrayList< VEFExistsSubQueryType>();
                }
                java.lang.Object j =obj;
                VEFExistsSubQueryType j1= (VEFExistsSubQueryType)__envelope.get(j,VEFExistsSubQueryType.class,false);
                this.existsSubQuery.add(j1);
            }
            return true;
        }
        if (info.name.equals("greaterThan"))
        {
            if(obj!=null)
            {
                if(this.greaterThan==null)
                {
                    this.greaterThan = new java.util.ArrayList< VEFGreaterThanType>();
                }
                java.lang.Object j =obj;
                VEFGreaterThanType j1= (VEFGreaterThanType)__envelope.get(j,VEFGreaterThanType.class,false);
                this.greaterThan.add(j1);
            }
            return true;
        }
        if (info.name.equals("greaterThanOrEqual"))
        {
            if(obj!=null)
            {
                if(this.greaterThanOrEqual==null)
                {
                    this.greaterThanOrEqual = new java.util.ArrayList< VEFGreaterThanOrEqualType>();
                }
                java.lang.Object j =obj;
                VEFGreaterThanOrEqualType j1= (VEFGreaterThanOrEqualType)__envelope.get(j,VEFGreaterThanOrEqualType.class,false);
                this.greaterThanOrEqual.add(j1);
            }
            return true;
        }
        if (info.name.equals("in"))
        {
            if(obj!=null)
            {
                if(this.in==null)
                {
                    this.in = new java.util.ArrayList< VEFInType>();
                }
                java.lang.Object j =obj;
                VEFInType j1= (VEFInType)__envelope.get(j,VEFInType.class,false);
                this.in.add(j1);
            }
            return true;
        }
        if (info.name.equals("inIgnoreCase"))
        {
            if(obj!=null)
            {
                if(this.inIgnoreCase==null)
                {
                    this.inIgnoreCase = new java.util.ArrayList< VEFInIgnoreCaseType>();
                }
                java.lang.Object j =obj;
                VEFInIgnoreCaseType j1= (VEFInIgnoreCaseType)__envelope.get(j,VEFInIgnoreCaseType.class,false);
                this.inIgnoreCase.add(j1);
            }
            return true;
        }
        if (info.name.equals("lessThan"))
        {
            if(obj!=null)
            {
                if(this.lessThan==null)
                {
                    this.lessThan = new java.util.ArrayList< VEFLessThanType>();
                }
                java.lang.Object j =obj;
                VEFLessThanType j1= (VEFLessThanType)__envelope.get(j,VEFLessThanType.class,false);
                this.lessThan.add(j1);
            }
            return true;
        }
        if (info.name.equals("lessThanOrEqual"))
        {
            if(obj!=null)
            {
                if(this.lessThanOrEqual==null)
                {
                    this.lessThanOrEqual = new java.util.ArrayList< VEFLessThanOrEqualType>();
                }
                java.lang.Object j =obj;
                VEFLessThanOrEqualType j1= (VEFLessThanOrEqualType)__envelope.get(j,VEFLessThanOrEqualType.class,false);
                this.lessThanOrEqual.add(j1);
            }
            return true;
        }
        if (info.name.equals("like"))
        {
            if(obj!=null)
            {
                if(this.like==null)
                {
                    this.like = new java.util.ArrayList< VEFLikeType>();
                }
                java.lang.Object j =obj;
                VEFLikeType j1= (VEFLikeType)__envelope.get(j,VEFLikeType.class,false);
                this.like.add(j1);
            }
            return true;
        }
        if (info.name.equals("likeIgnoreCase"))
        {
            if(obj!=null)
            {
                if(this.likeIgnoreCase==null)
                {
                    this.likeIgnoreCase = new java.util.ArrayList< VEFLikeIgnoreCaseType>();
                }
                java.lang.Object j =obj;
                VEFLikeIgnoreCaseType j1= (VEFLikeIgnoreCaseType)__envelope.get(j,VEFLikeIgnoreCaseType.class,false);
                this.likeIgnoreCase.add(j1);
            }
            return true;
        }
        if (info.name.equals("notEqual"))
        {
            if(obj!=null)
            {
                if(this.notEqual==null)
                {
                    this.notEqual = new java.util.ArrayList< VEFNotEqualType>();
                }
                java.lang.Object j =obj;
                VEFNotEqualType j1= (VEFNotEqualType)__envelope.get(j,VEFNotEqualType.class,false);
                this.notEqual.add(j1);
            }
            return true;
        }
        if (info.name.equals("notEqualIgnoreCase"))
        {
            if(obj!=null)
            {
                if(this.notEqualIgnoreCase==null)
                {
                    this.notEqualIgnoreCase = new java.util.ArrayList< VEFNotEqualIgnoreCaseType>();
                }
                java.lang.Object j =obj;
                VEFNotEqualIgnoreCaseType j1= (VEFNotEqualIgnoreCaseType)__envelope.get(j,VEFNotEqualIgnoreCaseType.class,false);
                this.notEqualIgnoreCase.add(j1);
            }
            return true;
        }
        if (info.name.equals("notIn"))
        {
            if(obj!=null)
            {
                if(this.notIn==null)
                {
                    this.notIn = new java.util.ArrayList< VEFNotInType>();
                }
                java.lang.Object j =obj;
                VEFNotInType j1= (VEFNotInType)__envelope.get(j,VEFNotInType.class,false);
                this.notIn.add(j1);
            }
            return true;
        }
        if (info.name.equals("notInIgnoreCase"))
        {
            if(obj!=null)
            {
                if(this.notInIgnoreCase==null)
                {
                    this.notInIgnoreCase = new java.util.ArrayList< VEFNotInIgnoreCaseType>();
                }
                java.lang.Object j =obj;
                VEFNotInIgnoreCaseType j1= (VEFNotInIgnoreCaseType)__envelope.get(j,VEFNotInIgnoreCaseType.class,false);
                this.notInIgnoreCase.add(j1);
            }
            return true;
        }
        if (info.name.equals("notLikeIgnoreCase"))
        {
            if(obj!=null)
            {
                if(this.notLikeIgnoreCase==null)
                {
                    this.notLikeIgnoreCase = new java.util.ArrayList< VEFNotLikeIgnoreCaseType>();
                }
                java.lang.Object j =obj;
                VEFNotLikeIgnoreCaseType j1= (VEFNotLikeIgnoreCaseType)__envelope.get(j,VEFNotLikeIgnoreCaseType.class,false);
                this.notLikeIgnoreCase.add(j1);
            }
            return true;
        }
        if (info.name.equals("notLike"))
        {
            if(obj!=null)
            {
                if(this.notLike==null)
                {
                    this.notLike = new java.util.ArrayList< VEFNotLikeType>();
                }
                java.lang.Object j =obj;
                VEFNotLikeType j1= (VEFNotLikeType)__envelope.get(j,VEFNotLikeType.class,false);
                this.notLike.add(j1);
            }
            return true;
        }
        if (info.name.equals("notNull"))
        {
            if(obj!=null)
            {
                if(this.notNull==null)
                {
                    this.notNull = new java.util.ArrayList< VEFNotNullType>();
                }
                java.lang.Object j =obj;
                VEFNotNullType j1= (VEFNotNullType)__envelope.get(j,VEFNotNullType.class,false);
                this.notNull.add(j1);
            }
            return true;
        }
        if (info.name.equals("null"))
        {
            if(obj!=null)
            {
                if(this.null==null)
                {
                    this.null = new java.util.ArrayList< VEFNullType>();
                }
                java.lang.Object j =obj;
                VEFNullType j1= (VEFNullType)__envelope.get(j,VEFNullType.class,false);
                this.null.add(j1);
            }
            return true;
        }
        if (info.name.equals("or"))
        {
            if(obj!=null)
            {
                if(this.or==null)
                {
                    this.or = new java.util.ArrayList< VEFOrType>();
                }
                java.lang.Object j =obj;
                VEFOrType j1= (VEFOrType)__envelope.get(j,VEFOrType.class,false);
                this.or.add(j1);
            }
            return true;
        }
        return super.loadProperty(info,soapObject,__envelope);
    }
    
    

    @Override
    public java.lang.Object getProperty(int propertyIndex) {
        int count = super.getPropertyCount();
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex>=count+0 && propertyIndex < count+0+this.and.size())
        {
            java.lang.Object and = this.and.get(propertyIndex-(count+0));
            return and;
        }
        if(propertyIndex>=count+0+this.and.size() && propertyIndex < count+0+this.and.size()+this.equal.size())
        {
            java.lang.Object equal = this.equal.get(propertyIndex-(count+0+this.and.size()));
            return equal;
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size())
        {
            java.lang.Object equalIgnoreCase = this.equalIgnoreCase.get(propertyIndex-(count+0+this.and.size()+this.equal.size()));
            return equalIgnoreCase;
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size())
        {
            java.lang.Object existsSubQuery = this.existsSubQuery.get(propertyIndex-(count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()));
            return existsSubQuery;
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size())
        {
            java.lang.Object greaterThan = this.greaterThan.get(propertyIndex-(count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()));
            return greaterThan;
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size())
        {
            java.lang.Object greaterThanOrEqual = this.greaterThanOrEqual.get(propertyIndex-(count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()));
            return greaterThanOrEqual;
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size())
        {
            java.lang.Object in = this.in.get(propertyIndex-(count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()));
            return in;
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size())
        {
            java.lang.Object inIgnoreCase = this.inIgnoreCase.get(propertyIndex-(count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()));
            return inIgnoreCase;
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size())
        {
            java.lang.Object lessThan = this.lessThan.get(propertyIndex-(count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()));
            return lessThan;
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size())
        {
            java.lang.Object lessThanOrEqual = this.lessThanOrEqual.get(propertyIndex-(count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()));
            return lessThanOrEqual;
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size())
        {
            java.lang.Object like = this.like.get(propertyIndex-(count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()));
            return like;
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size())
        {
            java.lang.Object likeIgnoreCase = this.likeIgnoreCase.get(propertyIndex-(count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()));
            return likeIgnoreCase;
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size())
        {
            java.lang.Object notEqual = this.notEqual.get(propertyIndex-(count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()));
            return notEqual;
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size())
        {
            java.lang.Object notEqualIgnoreCase = this.notEqualIgnoreCase.get(propertyIndex-(count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()));
            return notEqualIgnoreCase;
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size())
        {
            java.lang.Object notIn = this.notIn.get(propertyIndex-(count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()));
            return notIn;
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size())
        {
            java.lang.Object notInIgnoreCase = this.notInIgnoreCase.get(propertyIndex-(count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()));
            return notInIgnoreCase;
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size()+this.notLikeIgnoreCase.size())
        {
            java.lang.Object notLikeIgnoreCase = this.notLikeIgnoreCase.get(propertyIndex-(count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size()));
            return notLikeIgnoreCase;
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size()+this.notLikeIgnoreCase.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size()+this.notLikeIgnoreCase.size()+this.notLike.size())
        {
            java.lang.Object notLike = this.notLike.get(propertyIndex-(count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size()+this.notLikeIgnoreCase.size()));
            return notLike;
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size()+this.notLikeIgnoreCase.size()+this.notLike.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size()+this.notLikeIgnoreCase.size()+this.notLike.size()+this.notNull.size())
        {
            java.lang.Object notNull = this.notNull.get(propertyIndex-(count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size()+this.notLikeIgnoreCase.size()+this.notLike.size()));
            return notNull;
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size()+this.notLikeIgnoreCase.size()+this.notLike.size()+this.notNull.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size()+this.notLikeIgnoreCase.size()+this.notLike.size()+this.notNull.size()+this.null.size())
        {
            java.lang.Object null = this.null.get(propertyIndex-(count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size()+this.notLikeIgnoreCase.size()+this.notLike.size()+this.notNull.size()));
            return null;
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size()+this.notLikeIgnoreCase.size()+this.notLike.size()+this.notNull.size()+this.null.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size()+this.notLikeIgnoreCase.size()+this.notLike.size()+this.notNull.size()+this.null.size()+this.or.size())
        {
            java.lang.Object or = this.or.get(propertyIndex-(count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size()+this.notLikeIgnoreCase.size()+this.notLike.size()+this.notNull.size()+this.null.size()));
            return or;
        }
        return super.getProperty(propertyIndex);
    }


    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+0+and.size()+equal.size()+equalIgnoreCase.size()+existsSubQuery.size()+greaterThan.size()+greaterThanOrEqual.size()+in.size()+inIgnoreCase.size()+lessThan.size()+lessThanOrEqual.size()+like.size()+likeIgnoreCase.size()+notEqual.size()+notEqualIgnoreCase.size()+notIn.size()+notInIgnoreCase.size()+notLikeIgnoreCase.size()+notLike.size()+notNull.size()+null.size()+or.size();
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        int count = super.getPropertyCount();
        if(propertyIndex>=count+0 && propertyIndex < count+0+this.and.size())
        {
            info.type = VEFAndType.class;
            info.name = "and";
            info.namespace= "http://rice.kuali.org/core/v2_0";
        }
        if(propertyIndex>=count+0+this.and.size() && propertyIndex < count+0+this.and.size()+this.equal.size())
        {
            info.type = VEFEqualType.class;
            info.name = "equal";
            info.namespace= "http://rice.kuali.org/core/v2_0";
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size())
        {
            info.type = VEFEqualIgnoreCaseType.class;
            info.name = "equalIgnoreCase";
            info.namespace= "http://rice.kuali.org/core/v2_0";
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size())
        {
            info.type = VEFExistsSubQueryType.class;
            info.name = "existsSubQuery";
            info.namespace= "http://rice.kuali.org/core/v2_0";
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size())
        {
            info.type = VEFGreaterThanType.class;
            info.name = "greaterThan";
            info.namespace= "http://rice.kuali.org/core/v2_0";
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size())
        {
            info.type = VEFGreaterThanOrEqualType.class;
            info.name = "greaterThanOrEqual";
            info.namespace= "http://rice.kuali.org/core/v2_0";
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size())
        {
            info.type = VEFInType.class;
            info.name = "in";
            info.namespace= "http://rice.kuali.org/core/v2_0";
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size())
        {
            info.type = VEFInIgnoreCaseType.class;
            info.name = "inIgnoreCase";
            info.namespace= "http://rice.kuali.org/core/v2_0";
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size())
        {
            info.type = VEFLessThanType.class;
            info.name = "lessThan";
            info.namespace= "http://rice.kuali.org/core/v2_0";
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size())
        {
            info.type = VEFLessThanOrEqualType.class;
            info.name = "lessThanOrEqual";
            info.namespace= "http://rice.kuali.org/core/v2_0";
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size())
        {
            info.type = VEFLikeType.class;
            info.name = "like";
            info.namespace= "http://rice.kuali.org/core/v2_0";
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size())
        {
            info.type = VEFLikeIgnoreCaseType.class;
            info.name = "likeIgnoreCase";
            info.namespace= "http://rice.kuali.org/core/v2_0";
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size())
        {
            info.type = VEFNotEqualType.class;
            info.name = "notEqual";
            info.namespace= "http://rice.kuali.org/core/v2_0";
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size())
        {
            info.type = VEFNotEqualIgnoreCaseType.class;
            info.name = "notEqualIgnoreCase";
            info.namespace= "http://rice.kuali.org/core/v2_0";
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size())
        {
            info.type = VEFNotInType.class;
            info.name = "notIn";
            info.namespace= "http://rice.kuali.org/core/v2_0";
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size())
        {
            info.type = VEFNotInIgnoreCaseType.class;
            info.name = "notInIgnoreCase";
            info.namespace= "http://rice.kuali.org/core/v2_0";
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size()+this.notLikeIgnoreCase.size())
        {
            info.type = VEFNotLikeIgnoreCaseType.class;
            info.name = "notLikeIgnoreCase";
            info.namespace= "http://rice.kuali.org/core/v2_0";
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size()+this.notLikeIgnoreCase.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size()+this.notLikeIgnoreCase.size()+this.notLike.size())
        {
            info.type = VEFNotLikeType.class;
            info.name = "notLike";
            info.namespace= "http://rice.kuali.org/core/v2_0";
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size()+this.notLikeIgnoreCase.size()+this.notLike.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size()+this.notLikeIgnoreCase.size()+this.notLike.size()+this.notNull.size())
        {
            info.type = VEFNotNullType.class;
            info.name = "notNull";
            info.namespace= "http://rice.kuali.org/core/v2_0";
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size()+this.notLikeIgnoreCase.size()+this.notLike.size()+this.notNull.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size()+this.notLikeIgnoreCase.size()+this.notLike.size()+this.notNull.size()+this.null.size())
        {
            info.type = VEFNullType.class;
            info.name = "null";
            info.namespace= "http://rice.kuali.org/core/v2_0";
        }
        if(propertyIndex>=count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size()+this.notLikeIgnoreCase.size()+this.notLike.size()+this.notNull.size()+this.null.size() && propertyIndex < count+0+this.and.size()+this.equal.size()+this.equalIgnoreCase.size()+this.existsSubQuery.size()+this.greaterThan.size()+this.greaterThanOrEqual.size()+this.in.size()+this.inIgnoreCase.size()+this.lessThan.size()+this.lessThanOrEqual.size()+this.like.size()+this.likeIgnoreCase.size()+this.notEqual.size()+this.notEqualIgnoreCase.size()+this.notIn.size()+this.notInIgnoreCase.size()+this.notLikeIgnoreCase.size()+this.notLike.size()+this.notNull.size()+this.null.size()+this.or.size())
        {
            info.type = VEFOrType.class;
            info.name = "or";
            info.namespace= "http://rice.kuali.org/core/v2_0";
        }
        super.getPropertyInfo(propertyIndex,arg1,info);
    }
    
    @Override
    public void setProperty(int arg0, java.lang.Object arg1)
    {
    }

    
}

